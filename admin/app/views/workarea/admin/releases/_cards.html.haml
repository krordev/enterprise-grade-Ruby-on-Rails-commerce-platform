.grid.grid--auto.grid--flush.grid--center
  .grid__cell
    .card{ class: card_classes(:attributes, local_assigns[:active]) }
      = link_to edit_release_path(model), class: 'card__header' do
        %span.card__header-text= t('workarea.admin.releases.cards.attributes.title')
        = inline_svg 'workarea/admin/icons/attributes.svg', class: 'card__icon'

      - if local_assigns[:active].blank?
        .card__body
          %ul.list-reset
            %li
              %strong= t('workarea.admin.releases.cards.attributes.publishes')
              - if model.publish_at.present?
                #{local_time_ago(model.publish_at)}
              - else
                = t('workarea.admin.releases.cards.attributes.unscheduled')
            %li
              %strong= t('workarea.admin.releases.cards.attributes.last_published')
              - if model.published_at.present?
                #{local_time_ago(model.published_at)}
              - else
                = t('workarea.admin.releases.cards.attributes.never')
            %li
              %strong= t('workarea.admin.fields.tags')
              = model.tags.join(', ').presence || t('workarea.admin.releases.cards.attributes.none')
            %li
              %strong= t('workarea.admin.fields.updated_at')
              #{local_time_ago(model.updated_at)}
            %li
              %strong= t('workarea.admin.fields.created_at')
              #{local_time_ago(model.created_at)}

          = link_to edit_release_path(model), class: 'card__button' do
            %span.button.button--small= t('workarea.admin.releases.cards.attributes.button')

  .grid__cell
    .card{ class: card_classes(:plan_changes, local_assigns[:active]) }
      = link_to release_releasables_path(model), class: 'card__header' do
        %span.card__header-text= t('workarea.admin.releases.cards.plan_changes.title')
        = inline_svg 'workarea/admin/icons/plan_changes.svg', class: 'card__icon'

      - if local_assigns[:active].blank?
        .card__body
          .card__empty-note
            - if model.published? && !model.upcoming?
              %p= t('workarea.admin.releases.cards.plan_changes.release_published_html', attributes_link: link_to('Attributes', edit_release_path(model)))
            - else
              %p= t('workarea.admin.releases.cards.plan_changes.release_not_published_1')
              %p= t('workarea.admin.releases.cards.plan_changes.release_not_published_2')

          = link_to release_releasables_path(model), class: 'card__button' do
            %span.button.button--small= t('workarea.admin.releases.cards.plan_changes.button')

  .grid__cell
    .card{ class: card_classes(:planned_changes, local_assigns[:active]) }
      = link_to release_changesets_path(model), class: 'card__header' do
        %span.card__header-text
          - if model.upcoming?
            = t('workarea.admin.releases.cards.planned_changes.planned')
          = t('workarea.admin.releases.cards.planned_changes.changes')
        = inline_svg 'workarea/admin/icons/planned_changes.svg', class: 'card__icon'

      - if local_assigns[:active].blank?
        .card__body
          - if model.changesets_with_releasable.empty?
            %p.card__empty-note= t('workarea.admin.releases.cards.planned_changes.empty_note')
            = link_to release_changesets_path(model), class: 'card__button' do
              %span.button.button--small= t('workarea.admin.releases.cards.planned_changes.button')
          - else
            - model.changesets_with_releasable.take(3).each do |changeset|

              .activity
                .activity__header
                  .activity__avatar
                    = changeset_icon changeset, { class: 'svg-icon'}
                  .activity__name= changeset.name
                  .activity__time
                    = changeset.publish_humanized
                    - if changeset.release_date.present?
                      = local_time(changeset.release_date, :long)
                .activity__message
                  .release-changeset.release-changeset--activity
                    .release-changeset__body
                      - changeset.changed_fields.each do |field|
                        = render_changeset_field(changeset, field)

            = link_to release_changesets_path(model), class: 'card__button' do
              %span.button.button--small= t('workarea.admin.releases.cards.planned_changes.button')

  .grid__cell
    - if model.undoes?
      .card{ class: card_classes(:original, local_assigns[:active]) }
        = link_to original_release_path(model), class: 'card__header' do
          %span.card__header-text= t('workarea.admin.releases.cards.original.title')
          = inline_svg 'workarea/admin/icons/planned_changes.svg', class: 'card__icon'

        - if local_assigns[:active].blank?
          .card__body
            .card__empty-note
              %p= t('workarea.admin.releases.cards.original.undoes_html', link: link_to(model.undoes.name, release_path(model.undoes)))

              - if model.undoes.publish_at.present? && model.undoes.publish_at.future?
                %p= t('workarea.admin.releases.cards.undo.set_to_publish_html', link: link_to(model.undoes.name, release_path(model.undoes)), at: local_time_ago(model.undoes.publish_at))
              - elsif model.undoes.published_at.present?
                %p= t('workarea.admin.releases.cards.undo.published_html', link: link_to(model.undoes.name, release_path(model.undoes)), at: local_time_ago(model.undoes.published_at))
              - else
                %p= t('workarea.admin.releases.cards.undo.unscheduled_html', link: link_to(model.undoes.name, release_path(model.undoes)))

            = link_to original_release_path(model), class: 'card__button' do
              %span.button.button--small= t('workarea.admin.releases.cards.original.learn_more')

    - else
      .card{ class: card_classes(:undo, local_assigns[:active]) }
        = link_to undo_release_path(model), class: 'card__header' do
          %span.card__header-text= t('workarea.admin.releases.cards.undo.title')
          = inline_svg 'workarea/admin/icons/planned_changes.svg', class: 'card__icon'

        - if local_assigns[:active].blank?
          .card__body
            .card__empty-note
              - if model.undo.blank?
                %p= t('workarea.admin.releases.cards.undo.not_setup')

                = link_to undo_release_path(model), class: 'card__button' do
                  %span.button.button--small= t('workarea.admin.releases.cards.undo.build_an_undo')

              - else
                %p= t('workarea.admin.releases.cards.undo.undo_html', link: link_to(model.undo.name, release_path(model.undo)), at: local_time_ago(model.undo.created_at))

                - if model.undo.publish_at.present? && model.undo.publish_at.future?
                  %p= t('workarea.admin.releases.cards.undo.set_to_publish_html', link: link_to(model.undo.name, release_path(model.undo)), at: local_time_ago(model.undo.publish_at))
                - elsif model.undo.published_at.present?
                  %p= t('workarea.admin.releases.cards.undo.published_html', link: link_to(model.undo.name, release_path(model.undo)), at: local_time_ago(model.undo.published_at))
                - else
                  %p= t('workarea.admin.releases.cards.undo.unscheduled_html', link: link_to(model.undo.name, release_path(model.undo)))

                = link_to undo_release_path(model), class: 'card__button' do
                  %span.button.button--small= t('workarea.admin.releases.cards.undo.learn_more')

  .grid__cell
    = render 'workarea/admin/comments/card', commentable: model, active: local_assigns[:active]
